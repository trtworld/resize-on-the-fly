{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "TRT World - Crop CloudFormation template",
  "Parameters": {
    "BucketName": {
      "Description": "S3 bucket name",
      "Type": "String"
    },
    "ApiGatewayName": {
      "Description": "Rest api name",
      "Type": "String"
    }
  },
  "Resources": {
    "lambdaRoleCrop": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "PolicyS3Crop": {
      "DependsOn": [
        "lambdaRoleCrop"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "PolicyS3Crop",
        "Roles": [
          {
            "Ref": "lambdaRoleCrop"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            },
            {
              "Action": [
                "s3:*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "BucketName"
                    },
                    "/*"
                  ]
                ]
              },
              "Effect": "Allow"
            }
          ]
        }
      }
    },
    "LambdaCrop": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "lambdaRoleCrop",
        "PolicyS3Crop"
      ],
      
      "Properties": {
        "Environment": {
          "Variables": {
            "bucket_link": {
              "Fn::Join": [
                "",
                [
                  "http://s3-",
                  {
                "Ref": "AWS::Region"
              }, ".amazonaws.com/", {
              "Ref": "BucketName"
            },
              "/"  
                ]
              ]
            },
            "bucket_name": {
              "Ref": "BucketName"
            }
          }
        },
        "Code": {
          "S3Bucket": "trtworld-cloudformation",
          "S3Key": "crop.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "lambdaRoleCrop",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "MemorySize": 640
      }
    },
    "S3": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "PublicRead",
        "BucketName": {
          "Ref": "BucketName"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "Authorization"
              ],
              "AllowedMethods": [
                "GET"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "BucketName"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Bucket": {
          "Ref": "BucketName"
        }
      }
    },
    "APILambdaPermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "LambdaCrop"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGateway"
              },
              "/*/*/crop"
            ]
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Ref": "ApiGatewayName"
        },
        "Description": "API test",
        "FailOnWarnings": true
      }
    },
    "APIFirstResource": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGateway",
            "RootResourceId"
          ]
        },
        "PathPart": "crop",
        "RestApiId": {
          "Ref": "ApiGateway"
        }
      },
      "Type": "AWS::ApiGateway::Resource"
    },
    "APImethodPOST": {
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ],
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LambdaCrop",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "ResourceId": {
          "Ref": "APIFirstResource"
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        }
      },
      "Type": "AWS::ApiGateway::Method"
    },
    "APIDeployment": {
      "DependsOn": "APImethodPOST",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGateway"
        }
      },
      "Type": "AWS::ApiGateway::Deployment"
    },
    "APIStage": {
      "Properties": {
        "CacheClusterEnabled": false,
        "DeploymentId": {
          "Ref": "APIDeployment"
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "StageName": "prod"
      },
      "Type": "AWS::ApiGateway::Stage"
    }
    
  }
}